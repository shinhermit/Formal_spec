class Shed
types
Robot = <R1> | <R2> | <R3> | <R4> | <R5> | <R6> | <R7> | <R8> | <R9> | <R10>;
StandardTask = <T1> | <T2> | <T3> | <T4> | <T5> | <T6>;

Task = set of StandardTask;
Workers = set of Robot
Assigner = inmap Robot to Task;

instance variables
_waitingTasks : Task;
_runningTasks : Task;
_finishedTasks : Task;

_freeRobots : Workers;
_busyRobots : Workers;

_assign: Assigner;

inv _waitingTasks inter _runningTasks = {}
    and
    _waitingTasks inter _finishedTasks = {}
    and
    _runningTasks inter _finishedTasks = {}
    and
    _freeRobots inter _busyRobots = {}
    and
    dom _assign = _busyRobots
    and
    rng _assign = _runningTasks;

operations
public Shed: Workers * Task ==> Shed
Shed(workers, task) ==
   not yet specified
pre workers <> {}
post _freeRobots = workers
     and
     _busyRobots = {}
     and
     _waitingTasks = task
     and
     _runninTask union _finishedTaks = {}
     and
     dom _assign = {}
     and
     rng _assign = {};

public changeTask: Task ==> ()
changeTask(task) ==
   not yet specified
pre task <> {}
post _waitingTasks = task
     and
     _runningTasks union _finishedTasks = {}
     and
     _freeRobots = _freeRobots~ union _busyRobots~
     and
     _busyRobots = {}
     and
     dom _assign = {}
     and
     rng _assign = {};

assignTask: Robot * StandardTask ==> ()
assignTask(robot, task) ==
   not yet specified
pre robot in _freeRobots and task in _waitingTasks
post robot in _busyRobots
     and
     not robot in _freeRobots
     and
     task in _runningTasks
     and
     not task in _waitingTasks union _finishedTasks
     and
     _assign(robot) = task;

endTask: StandardTask ==> ()
endTask(task) ==
   not yet specified
pre task in _runningTasks
post task in _finishedTasks
     and
     not task in _waitingTasks union _runningTasks
     and
     runner(task) in _freeRobots
     and
     not runner(task) in _busyRobots
     and
     not runner(task) in dom _assign
     and
     not task in rng _assign;

endTask: Robot ==> ()
endTask(robot) ==
   not yet specified
pre robot in _busyRobots
post robot in _freeRobots
     and
     not robot in _busyRobots
     and
     taskOf(robot) in _finishedTasks
     and
     not taskOf(robot) in _waitingTasks union _runningTasks
     and
     not robot in dom _assign
     and
     not taskOf(robot) in rng _assign;

--reminder: Task = set of StandardTask
waitingTasks: ==> Task
waitingTasks() ==
   not yet specified
pre true
post RESULT = _waitingTasks

--reminder: Task = set of StandardTask
runningTasks:  ==> Task
runningTasks() ==
   not yet specified
pre true
post RESULT = _runningTasks

--reminder: Task = set of StandardTask
finishedTasks: ==> Task
finishedTasks() ==
   not yet specified
pre true
post RESULT = _finishedTasks

--reminder: Workers = set of Robot
freeRobots: ==> Workers
freeRobots() ==
   not yet specified
pre true
post RESULT = _freeRobots

--reminder: Workers = set of Robot
busyRobots: ==> Workers
busyRobots() ==
   not yet specified
pre true
post RESULT = _busyRobots

runner: StandardTask -> Robot
runner(task) ==
   not yet specified
pre task in _runningTasks
post _assign(RESULT) = task

taskOf: Robot -> StandardTask
taskOf(robot) ==
   not yet specified
pre robot in _busyRobots
post runner(RESULT) = robot

end Shed