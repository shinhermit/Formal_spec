library SystemeVente

from Basic/Numbers get Nat
from Basic/Numbers get Int
from Basic/Numbers get Rat
from Basic/CharactersAndStrings get String
from Basic/StructuredDatatypes get Set

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

spec Article00 =
String and Rat and Nat and Int
then
generated type Article ::= creer_article(String; Rat; Nat; Nat; Int)
preds
__est_en_rupture_de_stock: Article

ops
reference: Article -> String;
prix: Article -> Rat;
stock: Article -> Int;
delai_livraison: Article -> Nat;
taux_promotion: Article -> Nat;
prix_promotion: Article -> Rat;

forall art, art2 : Article; tx, delai : Nat; stck : Int; prx : Rat; ref : String

%%axiomes
. reference( creer_article(ref, prx, delai, tx, stck) ) = ref
. reference(art) = reference(art2) => art = art2

. stock(art) >= 0 /\ prix(art) >= 0
. art est_en_rupture_de_stock <=> stock(art) = 0

. art = creer_article(ref, prx, delai, tx, stck) => reference(art) = ref /\ prix(art) = prx /\ delai_livraison(art) = delai /\ taux_promotion(art) = tx /\ stock(art) = stck
. prix_promotion( creer_article(ref, prx, delai, tx, stck) ) = prx - (prx*tx)/100

end

spec Article =
Article00
then
ops
approvisionner: Article * Int ->? Article;
promotionner: Article * Nat -> Article;
livrer: Article * Int ->? Article;

forall art, art2 :Article; quant: Int; tx: Nat
%%ensembles de d√©finition
. def livrer(art, quant) <=> quant <= stock(art)
. def approvisionner(art, quant) <=> art est_en_rupture_de_stock

%%axiomes
. def approvisionner(art,quant) =>
     ( art2 = approvisionner(art,quant) <=> art2 = creer_article( reference(art), prix(art), delai_livraison(art), taux_promotion(art), quant) )
. art2 = promotionner(art, tx) <=> art2 = creer_article( reference(art), prix(art), delai_livraison(art), tx, stock(art) )
. def livrer(art, quant) =>
     ( art2 = livrer(art, quant) <=> art2 = creer_article( reference(art), prix(art), delai_livraison(art), taux_promotion(art), stock(art) - quant ) )

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


spec Gestionnaire00[sort S] =
Set[sort S]
with
sort Set[S] |-> Gestionnaire[S],
ops
{} |-> vide,
__+__ |-> inserer,
__-__ |-> supprimer
end

spec Gestionnaire[sort S] =
Gestionnaire00[sort S]
and String
then
ops
gestionnaire_vide: String -> Gestionnaire[S]
reference: Gestionnaire[S] -> String

forall gest, gest2 : Gestionnaire[S]; ref : String
. gest = gestionnaire_vide(ref) <=> gest = vide /\ reference(gest) = ref
. reference(gest) = reference(gest2) => gest = gest2
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


spec Catalogue = 
Article and Gestionnaire[sort Article fit sort S |-> Article]
with
sort Gestionnaire[Article] |-> Catalogue,
op gestionnaire_vide |-> catalogue_vide
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


spec Collection = 
Catalogue and Gestionnaire[sort Catalogue fit sort S |-> Catalogue]
with
sort Gestionnaire[Catalogue] |-> Collection,
op gestionnaire_vide |-> collection_vide
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


spec Systeme =
Collection and String
then
generated type Systeme ::= systeme_vide(String) | changer_collection(Systeme, Collection)
ops
reference: Systeme -> String
collection_de__: Systeme -> Collection

forall sys, sys2: Systeme; coll, coll2 : Collection; ref : String

%% Axiomes
. reference( systeme_vide(ref) ) = ref
. reference( changer_collection(sys, coll) ) = reference(sys)
. reference(sys) = reference(sys2) => sys = sys2

. collection_de systeme_vide(ref) = vide
. collection_de changer_collection(sys, coll) = coll
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


arch spec ARCHITECTURE_SYSTEME_VENTE =
%% Units to be implemented
units
NAT: Nat
INT: Int given NAT
RAT: Rat given INT
STRING : String given NAT
SET: Set[sort elem] given NAT

F_ARTICLE00: String * Rat * Nat * Int -> Article00 %%first class
ARTICLE00 = F_ARTICLE00[STRING][RAT][NAT][INT]
ARTICLE: Article given ARTICLE00

GESTIONNAIRE00: Gestionnaire00[sort S] given SET
F_GESTIONNAIRE: Gestionnaire00[sort S] * String -> Gestionnaire[sort S]
GESTIONNAIRE = F_GESTIONNAIRE[GESTIONNAIRE00][STRING]

F_CATALOGUE:  Article * Gestionnaire[sort Article fit sort S |-> Article] -> Catalogue
GESTIONNAIRE_ARTICLE: Gestionnaire[sort Article fit sort S |-> Article] given ARTICLE
CATALOGUE = F_CATALOGUE[ARTICLE][GESTIONNAIRE_ARTICLE]

F_COLLECTION:  Catalogue * Gestionnaire[sort Catalogue fit sort S |-> Catalogue] -> Collection
GESTIONNAIRE_CATALOGUE: Gestionnaire[sort Catalogue fit sort S |-> Catalogue] given CATALOGUE
COLLECTION = F_COLLECTION[CATALOGUE][GESTIONNAIRE_CATALOGUE]

F_SYSTEME: Collection * String -> Systeme
SYSTEME_VENTE = F_SYSTEME[COLLECTION][STRING]

%% units linking procedure
result SYSTEME_VENTE

end